//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThreePlus.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ThreePlus.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	/**
        /// * Full-screen textured quad shader
        /// */
        ///	var CopyShader = {
        ///		uniforms: {
        ///			&apos;tDiffuse&apos;: {
        ///				value: null
        ///			},
        ///			&apos;opacity&apos;: {
        ///				value: 1.0
        ///			}
        ///		},
        ///		vertexShader:
        ///  /* glsl */
        ///  `
        ///
        ///		varying vec2 vUv;
        ///
        ///		void main() {
        ///
        ///			vUv = uv;
        ///			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        ///
        ///		}`,
        ///		fragmentShader:
        ///  /* glsl */
        ///  `
        ///
        ///		uniform float opacity;
        ///
        ///		uniform sampler2D tDiffuse;
        ///
        ///		varying vec2 vUv;
        ///
        ///		void main() {
        ///
        ///			vec4 texel = texture2D( tDiffuse, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CopyShader {
            get {
                return ResourceManager.GetString("CopyShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	class EffectComposer {
        ///
        ///		constructor( renderer, renderTarget ) {
        ///
        ///			this.renderer = renderer;
        ///
        ///			if ( renderTarget === undefined ) {
        ///
        ///				const parameters = {
        ///					minFilter: THREE.LinearFilter,
        ///					magFilter: THREE.LinearFilter,
        ///					format: THREE.RGBAFormat
        ///				};
        ///				const size = renderer.getSize( new THREE.Vector2() );
        ///				this._pixelRatio = renderer.getPixelRatio();
        ///				this._width = size.width;
        ///				this._height = size.height;
        ///				renderTarget = new THREE.WebGLRenderTarget( this._ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EffectComposer {
            get {
                return ResourceManager.GetString("EffectComposer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to varying vec3 vPosition;\nvoid main() {\n\tgl_FragColor = vec4( vPosition * 2.0, 1.0 );\n}.
        /// </summary>
        internal static string FragmentShader {
            get {
                return ResourceManager.GetString("FragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	// Unlike TrackballControls, it maintains the &quot;up&quot; direction object.up (+Y by default).
        ///	//
        ///	//    Orbit - left mouse / touch: one-finger move
        ///	//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
        ///	//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move
        ///
        ///	const _changeEvent = {
        ///		type: &apos;change&apos;
        ///	};
        ///	const _startEvent = {
        ///		type: &apos;start&apos;
        ///	};
        ///	const _endEvent = {
        ///		type: &apos;end&apos;
        ///	};
        ///
        ///	class OrbitControls extends THREE.EventDi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string OrbitControls {
            get {
                return ResourceManager.GetString("OrbitControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	class ShaderPass extends THREE.Pass {
        ///
        ///		constructor( shader, textureID ) {
        ///
        ///			super();
        ///			this.textureID = textureID !== undefined ? textureID : &apos;tDiffuse&apos;;
        ///
        ///			if ( shader instanceof THREE.ShaderMaterial ) {
        ///
        ///				this.uniforms = shader.uniforms;
        ///				this.material = shader;
        ///
        ///			} else if ( shader ) {
        ///
        ///				this.uniforms = THREE.UniformsUtils.clone( shader.uniforms );
        ///				this.material = new THREE.ShaderMaterial( {
        ///					defines: Object.assign( {}, shader.defines ),
        ///					uniforms: this.unif [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ShaderPass {
            get {
                return ResourceManager.GetString("ShaderPass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	// Ported from Stefan Gustavson&apos;s java implementation
        ///	// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
        ///	// Read Stefan&apos;s excellent paper for details on how this code works.
        ///	//
        ///	// Sean McCullough banksean@gmail.com
        ///	//
        ///	// Added 4D noise
        ///
        ///	/**
        /// * You can pass in a random number generator object if you like.
        /// * It is assumed to have a random() method.
        /// */
        ///	class SimplexNoise {
        ///
        ///		constructor( r = Math ) {
        ///
        ///			this.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SimplexNoise {
            get {
                return ResourceManager.GetString("SimplexNoise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	class SSAOPass extends THREE.Pass {
        ///
        ///		constructor( scene, camera, width, height ) {
        ///
        ///			super();
        ///			this.width = width !== undefined ? width : 512;
        ///			this.height = height !== undefined ? height : 512;
        ///			this.clear = true;
        ///			this.camera = camera;
        ///			this.scene = scene;
        ///			this.kernelRadius = 8;
        ///			this.kernelSize = 32;
        ///			this.kernel = [];
        ///			this.noiseTexture = null;
        ///			this.output = 0;
        ///			this.minDistance = 0.005;
        ///			this.maxDistance = 0.1;
        ///			this._visibilityCache = new Map(); //
        ///
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SSAOPass {
            get {
                return ResourceManager.GetString("SSAOPass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	/**
        /// * References:
        /// * http://john-chapman-graphics.blogspot.com/2013/01/ssao-tutorial.html
        /// * https://learnopengl.com/Advanced-Lighting/SSAO
        /// * https://github.com/McNopper/OpenGL/blob/master/Example28/shader/ssao.frag.glsl
        /// */
        ///
        ///	const SSAOShader = {
        ///		defines: {
        ///			&apos;PERSPECTIVE_CAMERA&apos;: 1,
        ///			&apos;KERNEL_SIZE&apos;: 32
        ///		},
        ///		uniforms: {
        ///			&apos;tDiffuse&apos;: {
        ///				value: null
        ///			},
        ///			&apos;tNormal&apos;: {
        ///				value: null
        ///			},
        ///			&apos;tDepth&apos;: {
        ///				value: null
        ///			},
        ///			&apos;tNoise&apos;: {
        ///				value: null
        ///			},
        ///			&apos;kernel&apos;: [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SSAOShader {
            get {
                return ResourceManager.GetString("SSAOShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * @license
        /// * Copyright 2010-2021 Three.js Authors
        /// * SPDX-License-Identifier: MIT
        /// */
        ///(function (global, factory) {
        ///	typeof exports === &apos;object&apos; &amp;&amp; typeof module !== &apos;undefined&apos; ? factory(exports) :
        ///	typeof define === &apos;function&apos; &amp;&amp; define.amd ? define([&apos;exports&apos;], factory) :
        ///	(global = typeof globalThis !== &apos;undefined&apos; ? globalThis : global || self, factory(global.THREE = {}));
        ///}(this, (function (exports) { &apos;use strict&apos;;
        ///
        ///	const REVISION = &apos;131&apos;;
        ///	const MOUSE = {
        ///		LEFT: 0,
        ///		MIDDLE: 1,
        ///		RIGHT: 2,
        ///		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string three {
            get {
                return ResourceManager.GetString("three", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Helper_Axis_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Helper_Axis_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Helper_Grid_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Helper_Grid_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Light_Ambient_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Light_Ambient_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Light_Directional_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Light_Directional_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Light_Hemisphere_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Light_Hemisphere_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Light_Linear_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Light_Linear_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Light_Point_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Light_Point_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Light_Spot_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Light_Spot_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Basic_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Basic_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Depth_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Depth_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Lambert_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Lambert_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Normal_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Normal_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Phong_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Phong_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Physical_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Physical_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Standard_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Standard_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Three_Materials_Toon_01 {
            get {
                object obj = ResourceManager.GetObject("Three_Materials_Toon_01", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import * as THREE from &apos;https://threejsfundamentals.org/threejs/resources/threejs/r127/build/three.module.js&apos;;.
        /// </summary>
        internal static string ThreeJsHeader {
            get {
                return ResourceManager.GetString("ThreeJsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ThreePlus_16 {
            get {
                object obj = ResourceManager.GetObject("ThreePlus_16", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ThreePlus_24 {
            get {
                object obj = ResourceManager.GetObject("ThreePlus_24", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	const _v1 = new THREE.Vector3();
        ///
        ///	const _v2 = new THREE.Vector3();
        ///
        ///	const _normalMatrix = new THREE.Matrix3();
        ///
        ///	class VertexNormalsHelper extends THREE.LineSegments {
        ///
        ///		constructor( object, size = 1, color = 0xff0000 ) {
        ///
        ///			let nNormals = 0;
        ///			const objGeometry = object.geometry;
        ///
        ///			if ( objGeometry &amp;&amp; objGeometry.isGeometry ) {
        ///
        ///				console.error( &apos;THREE.VertexNormalsHelper no longer supports Geometry. Use THREE.BufferGeometry instead.&apos; );
        ///				return;
        ///
        ///			} else if ( objGeometry &amp;&amp; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexNormalsHelper {
            get {
                return ResourceManager.GetString("VertexNormalsHelper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to uniform float time;\nvarying vec3 vPosition;\nvoid main() {\n\tvPosition = position;\n\tvPosition.x += sin( time + vPosition.z * 4.0 ) / 4.0;\n\tvPosition.y += cos( time + vPosition.z * 4.0 ) / 4.0;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( vPosition, 1.0 );\n}.
        /// </summary>
        internal static string VertexShader {
            get {
                return ResourceManager.GetString("VertexShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ( function () {
        ///
        ///	const _v1 = new THREE.Vector3();
        ///
        ///	const _v2 = new THREE.Vector3();
        ///
        ///	class VertexTangentsHelper extends THREE.LineSegments {
        ///
        ///		constructor( object, size = 1, color = 0x00ffff ) {
        ///
        ///			const objGeometry = object.geometry;
        ///
        ///			if ( ! ( objGeometry &amp;&amp; objGeometry.isBufferGeometry ) ) {
        ///
        ///				console.error( &apos;THREE.VertexTangentsHelper: geometry not an instance of THREE.BufferGeometry.&apos;, objGeometry );
        ///				return;
        ///
        ///			}
        ///
        ///			const nTangents = objGeometry.attributes.tangent.count; //
        ///
        ///			const ge [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VertexTangentsHelper {
            get {
                return ResourceManager.GetString("VertexTangentsHelper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to class VRButton {
        ///
        ///	static createButton( renderer, options ) {
        ///
        ///		if ( options ) {
        ///
        ///			console.error( &apos;THREE.VRButton: The &quot;options&quot; parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.&apos; );
        ///
        ///		}
        ///
        ///		const button = document.createElement( &apos;button&apos; );
        ///
        ///		function showEnterVR( /*device*/ ) {
        ///
        ///			let currentSession = null;
        ///
        ///			async function onSessionStarted( session ) {
        ///
        ///				session.addEventListener( &apos;end&apos;, onSessionEnded );
        ///
        ///				awa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string VRButton {
            get {
                return ResourceManager.GetString("VRButton", resourceCulture);
            }
        }
    }
}
